name: CI
on:
  # See the documentation for more intricate event dispatch here:
  # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
  push:
    branches:
    - "!dependabot/*"
    - "*"
  pull_request:
    branches:
    - "*"
jobs:
  build:
    name: Format
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black==22.3.0
        pip install flake8

    - name: Check Formatting (Black)
      run: |
        black --line-length=100 --target-version=py39 --check --diff .

    - name: Check Formatting (Flake8)
      run: |
        # The code-base needs to be cleaned up. There are too many Flake8
        # related warnings now. Ignore known problems to catch new ones.
        flake8 --ignore=C901,E203,E262,E265,E266,E402,E501,E712,E713,E722,E731,E741,F401,F403,F405,F811,F821,F841,W503
        # Run full scan for visibility purposes.
        flake8 --exit-zero

    - name: Check Requirements are pinned
      run: |
        # Read each line of requirement.txt and flag if any line doesn't contain ==, @, newline, or #
        sed '/^$/d' < requirements.txt | while read i; do if [[ ! $i =~ [==|@|^#] ]]; then echo $i is not pinned; fi; done

  unit:
    name: Unit Test
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        platform: ['linux/arm64', 'linux/ppc64le']
        os: [ ubuntu20.04 ]
        architecture: [ ppc64le ]
      fail-fast: false
      max-parallel: 2   
    steps:

    - name: Checkout
      uses: actions/checkout@v3
    - name: Run-On-ArchAction
      uses: uraimo/run-on-arch-action@v2
      with:
          distro: ${{ matrix.os }}
          arch: ${{ matrix.architecture }}
          run: |
            if [[ "${{ matrix.architecture }}" == "amd64" ]]; then
              echo "amd64"
            elif [[ "${{ matrix.architecture }}" == "ppc64le" ]]; then
              echo "inside Unit Test - arch"
              uname -m
              #apt-get -y update;
              #apt-get -y install libgpgme-dev libldap2-dev libsasl2-dev swig python3.9-dev python3-pip findutils;
              #apt-get -y install libffi-dev libssl-dev libjpeg-dev git
              #git clone ${{ github.server_url }}/${{ github.repository }} build
              #cd build
              #cat requirements-dev.txt | grep tox | xargs pip install
              #tox -e py39-unit
            fi

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-unit

  types:
    name: Types Test
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig git

    - name: Check requirements.txt
      run: |
        pip install --upgrade pip
        pip install wheel  # allow pip to use wheel instead of legacy 'setup.py install'
        git clone ${{ github.server_url }}/${{ github.repository }} build
        cd build
        ./hack/verify-requirements.sh

    - name: Install dependencies
      run: |
        pip install -r ./requirements-dev.txt

    - name: Check Types
      run: make types-test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        platform: ['linux/arm64', 'linux/ppc64le']
        os: [ ubuntu20.04 ]
        architecture: [ ppc64le ]
      fail-fast: false
      max-parallel: 2 
    steps:

    - name: Checkout
      uses: actions/checkout@v3
    - name: Run-On-Arch
      uses: uraimo/run-on-arch-action@v2
      with:
          distro: ${{ matrix.os }}
          arch: ${{ matrix.architecture }}
          run: |
            if [[ "${{ matrix.architecture }}" == "amd64" ]]; then
              echo "amd64"
            elif [[ "${{ matrix.architecture }}" == "ppc64le" ]]; then
              echo "inside Unit Test - arch"
              uname -m
              #apt-get -y update;
              #apt-get -y install libgpgme-dev libldap2-dev libsasl2-dev swig python3.9-dev python3-pip findutils;
              #apt-get -y install libffi-dev libssl-dev libjpeg-dev git;
              #git clone ${{ github.server_url }}/${{ github.repository }} build;
              #cd build
              #cat requirements-dev.txt | grep tox | xargs pip install;
              #tox -e py39-e2e;
            fi	


    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-e2e

  registry:
    name: E2E Registry Tests
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-registry

  cypress:
    name: Cypress Tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        platform: ['linux/arm64', 'linux/ppc64le']
        os: [ ubuntu22.04 ]
        architecture: [ ppc64le ]
      fail-fast: false
      max-parallel: 2   
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Install dependencies and check types on ${{ matrix.architecture }} 
      run: >-
          docker run 
          --rm
          -w /
          --platform ${{ matrix.architecture }}
          --mount type=bind,source="$(pwd)"/requirements-dev.txt,target=/requirements-dev.txt,readonly
          --mount type=bind,source="$(pwd)"/requirements.txt,target=/requirements.txt,readonly
          --mount type=bind,source="$(pwd)"/Makefile,target=/Makefile,readonly
          "quay.io/raja0940/types-test:latest" \
          /bin/bash -c '
          echo "Inside Cypress Tests";
          uname -a;
          apt-get -y update;
          apt-get install -y libgpgme-dev libldap2-dev libsasl2-dev swig git;
          apt-get install -y ca-certificates curl software-properties-common;
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose;
          chmod +x /usr/local/bin/docker-compose;
          apt-get remove docker docker-engine docker.io containerd runc;
          apt install apt-transport-https ca-certificates curl software-properties-common -y;
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -;
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/trusted.gpg.d/docker-archive-keyring.gpg;
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable";
          apt-get -y update;
          apt-get install docker-ce -y;
          add-apt-repository "deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" -y;
          add-apt-repository  "deb https://apt.dockerproject.org/repo/ ubuntu-$(lsb_release -cs) main" -y;
          apt-get -y install docker-ce docker-compose npm apt-transport-https;
          pip install --upgrade pip;
          pip install wheel;
          apt-get -y install npm apt-transport-https;
          git clone ${{ github.server_url }}/${{ github.repository }} build;
          cd build;
          echo "Inside build";
          docker build -t localhost/quay-local:latest .;
          docker-compose up -d redis quay-db;
          DOCKER_USER="1001:0" docker-compose up -d --no-build quay;
          echo "Going for npm and python";
          git clone https://github.com/quay/quay.git
          cd web && npm run quay:seed
          pip install pytest requests;
          docker restart quay-quay;
          sleep 50;
          echo "cat Makefile";
          docker ps | grep quay;
          make integration-test;'
    - name: Cypress run
      uses: cypress-io/github-action@v5
      with:
        browser: chrome
        build: npm run build
        start: npm run start:integration
        wait-on: 'http://localhost:9000'
        wait-on-timeout: 120
        working-directory: web
      env:
        REACT_QUAY_APP_API_URL: http://localhost:8080

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: web/cypress/screenshots

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: web/cypress/videos

  mysql:
    name: E2E MySQL Test
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        sudo systemctl unmask docker
        sudo systemctl start docker
        docker version
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-mysql

  psql:
    name: E2E Postgres Test
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        sudo systemctl unmask docker
        sudo systemctl start docker
        docker version
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-psql
