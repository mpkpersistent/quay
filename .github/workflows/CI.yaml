name: CI
on:
  # See the documentation for more intricate event dispatch here:
  # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
  push:
    branches:
    - "!dependabot/*"
    - "*"
  pull_request:
    branches:
    - "*"
jobs:
  build:
    name: Format
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black==22.3.0
        pip install flake8

    - name: Check Formatting (Black)
      run: |
        black --line-length=100 --target-version=py39 --check --diff .

    - name: Check Formatting (Flake8)
      run: |
        # The code-base needs to be cleaned up. There are too many Flake8
        # related warnings now. Ignore known problems to catch new ones.
        flake8 --ignore=C901,E203,E262,E265,E266,E402,E501,E712,E713,E722,E731,E741,F401,F403,F405,F811,F821,F841,W503
        # Run full scan for visibility purposes.
        flake8 --exit-zero

    - name: Check Requirements are pinned
      run: |
        # Read each line of requirement.txt and flag if any line doesn't contain ==, @, newline, or #
        sed '/^$/d' < requirements.txt | while read i; do if [[ ! $i =~ [==|@|^#] ]]; then echo $i is not pinned; fi; done

  unit:
    name: Unit Test
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-unit

  types:
    name: Types Test
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          requirements-dev.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig

    - name: Check requirements.txt
      run: |
        pip install wheel  # allow pip to use wheel instead of legacy 'setup.py install'
        ./hack/verify-requirements.sh

    - name: Install dependencies
      run: |
        pip install -r ./requirements-dev.txt

    - name: Check Types
      run: make types-test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-e2e

  registry:
    name: E2E Registry Tests
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-registry

  cypress:
    name: Cypress Tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        os: [ ubuntu20.04 ]
        architecture: [ amd64, ppc64le ]
      fail-fast: false
      max-parallel: 2   
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Install dependencies and check types on ${{ matrix.architecture }} 
      run: |
        docker run --rm --platform ${{ matrix.architecture }} -v /var/run/docker.sock:/var/run/docker.sock --mount "type=bind,src=$(pwd),dst=/build" -w "/build" ubuntu:20.04 /bin/bash -ec ' \
        echo "hello from $(uname -m)"; \
        export DEBIAN_FRONTEND=noninteractive; \
        apt-get update -y; \
        apt-get install -y git wget tar curl npm gnupg2 ca-certificates sudo build-essential gcc manpages-dev autoconf libtool pkg-config software-properties-common; \
        sudo install -m 0755 -d /etc/apt/keyrings; \
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg; \
        sudo chmod a+r /etc/apt/keyrings/docker.gpg; \
        echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null; \
        apt-get update -y; \
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin; \
        sudo apt-get install -y docker-compose; \
        docker --version; \
        docker-compose --version; \
        docker compose version; \
        add-apt-repository ppa:deadsnakes/ppa -y; \
        apt-get install python3.9 python3-pip python3-dev libpython3.9-dev python3.9-distutils -y; \
        python3.9 -m pip install --upgrade pip; \
        pip --version; \
        python3.9 --version; \
        apt-get install -y libgpgme-dev libldap2-dev libsasl2-dev; \
        export DOCKER_BUILDKIT=1; \
        
        chown -R 1001:root quay-entrypoint.sh; \
        chown -R 1001:root *.*; \
        ls -lrt; \
        docker build -t localhost/quay-local:latest .; \
        docker-compose up -d redis quay-db; \
        sleep 100; \
        DOCKER_USER="1001:0" docker-compose up -d --no-build quay; \
        docker logs quay-quay; \
        echo "Going for npm and python"; \
        cd web && npm run quay:seed; \
        pip install pytest requests grpcio==1.53.0; \
        docker restart quay-quay; \
        sleep 50; \
        cd ..; \
        make integration-test;'
          
    - name: Cypress run
      uses: cypress-io/github-action@v5
      with:
        browser: chrome
        build: npm run build
        start: npm run start:integration
        wait-on: 'http://localhost:9000'
        wait-on-timeout: 120
        working-directory: web
      env:
        REACT_QUAY_APP_API_URL: http://localhost:8080

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: web/cypress/screenshots

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: web/cypress/videos

  mysql:
    name: E2E MySQL Test
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        sudo systemctl unmask docker
        sudo systemctl start docker
        docker version
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-mysql

  psql:
    name: E2E Postgres Test
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig
        sudo systemctl unmask docker
        sudo systemctl start docker
        docker version
        python -m pip install --upgrade pip
        cat requirements-dev.txt | grep tox | xargs pip install

    - name: tox
      run: tox -e py39-psql
